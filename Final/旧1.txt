#define POPSIZE 100             
#define MAXGENS 50                                            
#define PXOVER 0.5               
#define PMUTATION 0.045         
#define TRUE 1
#define FALSE 0
struct genotype
{
	double gene[NVARS];                        //取维度为NVARS的变量进行优化
	double genefixed[NVARS];                    //另一半维度的变量固定不变
	double fitness;
	double upper[NVARS];
	double lower[NVARS];
	double rfitness;
	double cfitness;
};
class pop {
public:
	int generation;
	int cur_best;

	struct genotype population[POPSIZE + 1];
	struct genotype newpopulation[POPSIZE + 1];


	/*void initialize(void);
	double randval(double, double);
	void evaluate(void);
	void keep_the_best(void);
	void elitist(void);
	void select(void);
	void crossover(void);
	void Xover(int, int);
	void swap(double *, double *);
	void mutate(void);*/

	void initialize(void)
	{


		//	printf("initialize ......\n");
		int i, j;
		double lbound, ubound;
		//	fscanf(infile, "%lf", &lbound);
		//	fscanf(infile, "%lf", &ubound);
		lbound = -500;                                        	//	修改变量的取值范围。 
		ubound = 500;
		for (j = 0; j < POPSIZE + 1; j++)
		{
			population[j].fitness = 100;
			population[j].rfitness = 0;
			population[j].cfitness = 0;
			for (i = 0; i < NVARS; i++) {

				population[j].lower[i] = lbound;
				population[j].upper[i] = ubound;
				population[j].gene[i] = randval(population[j].lower[i],
					population[j].upper[i]);
				population[j].genefixed[i] = randval(population[j].lower[i],
					population[j].upper[i]);

			}

		}

		population[POPSIZE].fitness = 10000000;


	}


	double randval(double low, double high)
	{
		double val;
		val = ((double)(rand() % 1000) / 1000.0)*(high - low) + low;
		return(val);
	}


	void evaluate(void)                                                    /*   在这里进行函数修改公式      ,当输入vector时加入函数参数为vector                */
	{
		int j;
		int i;
		double rt1[POPSIZE];
		double x[NVARS * 2];

		for (j = 0; j < POPSIZE; j++)
		{
			rt1[j] = 0;
			for (i = 0; i < NVARS; i++)
			{
				x[i] = population[j].gene[i];
				x[i + NVARS] = population[j].genefixed[i];
			}
			rt1[j] = f8(x);               //这里调用别的文件里的函数，输入x[i],计算rt1[j]
		}
		for (j = 0; j < POPSIZE; j++)
			population[j].fitness = rt1[j];
		//		printf("%d\t%g\t%g\t%g\t%g\n",j,population[j].gene[0],population[j].gene[1],population[j].gene[2],population[j].fitness);	

	}



	void keep_the_best()
	{
		int mem;
		int i;
		cur_best = 0;

		for (mem = 0; mem < POPSIZE; mem++)
		{
			if (population[mem].fitness < population[POPSIZE].fitness)
			{
				cur_best = mem;
				population[POPSIZE].fitness = population[mem].fitness;
			}
		}

		for (i = 0; i < NVARS; i++)
			population[POPSIZE].gene[i] = population[cur_best].gene[i];
	}

	void elitist()                              //遗传变异后找到最好和最坏的fitness
	{
		int i;
		double best, worst;
		int best_mem = 0, worst_mem = 0;

		best = population[0].fitness;
		worst = population[0].fitness;
		for (i = 0; i < POPSIZE - 1; ++i)
		{
			if (population[i].fitness < population[i + 1].fitness)
			{
				if (population[i].fitness <= best)
				{
					best = population[i].fitness;
					best_mem = i;
				}
				if (population[i + 1].fitness >= worst)
				{
					worst = population[i + 1].fitness;
					worst_mem = i + 1;
				}
			}
			else
			{
				if (population[i].fitness >= worst)
				{
					worst = population[i].fitness;
					worst_mem = i;
				}
				if (population[i + 1].fitness <= best)
				{
					best = population[i + 1].fitness;
					best_mem = i + 1;
				}
			}
		}

		if (best <= population[POPSIZE].fitness)
		{
			for (i = 0; i < NVARS; i++)
				population[POPSIZE].gene[i] = population[best_mem].gene[i];
			population[POPSIZE].fitness = population[best_mem].fitness;
		}
		else
		{
			for (i = 0; i < NVARS; i++)
				population[worst_mem].gene[i] = population[POPSIZE].gene[i];
			population[worst_mem].fitness = population[POPSIZE].fitness;
		}

		//	printf("best individual %d\t fitness = %g\t%g\n",best_mem,population[POPSIZE].fitness,population[best_mem].fitness);
	}

	void select(void)                    //这里使用的是锦标赛法选择下一代个体            
	{
		int mem, i, j, k;
		struct genotype a[POPSIZE / 10];
		struct genotype b;
		for (k = 0; k<POPSIZE; k++)
		{

			for (i = 0; i<POPSIZE / 10; i++)
			{
				j = ((int)(rand() % (POPSIZE - 0)));
				a[i] = population[j];

			}
			for (i = 0; i<POPSIZE / 10; i++)
			{
				b = a[0];
				if (a[i].fitness<b.fitness)
					b = a[i];
			}
			newpopulation[k] = b;
		}
		for (i = 0; i<POPSIZE; i++)

			population[i] = newpopulation[i];

	}


	void crossover(void)
	{
		int i, mem, one;
		int first = 0;
		double x;

		//	printf("crossover ......\n");

		for (mem = 0; mem < POPSIZE; ++mem)
		{
			x = rand() % 1000 / 1000.0;
			if (x < PXOVER)
			{
				++first;
				if (first % 2 == 0)
					Xover(one, mem);
				else
					one = mem;
			}
			//		printf("%d\t%g\t%g\t%g\n",mem,population[mem].gene[0],population[mem].gene[1],population[mem].gene[2]);
		}
	}

	void Xover(int one, int two)
	{
		int i;
		int point;


		if (NVARS > 1)
		{
			if (NVARS == 2)
				point = 1;
			else
				point = (rand() % (NVARS - 1)) + 1;

			for (i = 0; i < point; i++)
				swap(&population[one].gene[i], &population[two].gene[i]);

		}
	}


	void swap(double *x, double *y)
	{
		double temp;

		temp = *x;
		*x = *y;
		*y = temp;

	}


	void mutate(void)
	{
		int i, j;
		double lbound, hbound;
		double x;

		//	printf("mutate ......\n");

		for (i = 0; i < POPSIZE; i++) {
			for (j = 0; j < NVARS; j++)
			{
				x = rand() % 1000 / 1000.0;
				if (x < PMUTATION)
				{
					lbound = population[i].lower[j];
					hbound = population[i].upper[j];
					population[i].gene[j] = randval(lbound, hbound);
				}
			}
			//		printf("%d\t%g\t%g\t%g\n",i,population[i].gene[0],population[i].gene[1],population[i].gene[2]);
		}
	}


	/*void report(void)
	{
	int i;
	double best_val;
	double avg;
	double stddev;
	double sum_square;
	double square_sum;
	double sum;

	sum = 0.0;
	sum_square = 0.0;

	for (i = 0; i < POPSIZE; i++)
	{
	sum += population[i].fitness;
	sum_square += population[i].fitness * population[i].fitness;
	}

	avg = sum / (double)POPSIZE;
	square_sum = avg * avg * POPSIZE;
	stddev = sqrt((sum_square - square_sum) / (POPSIZE - 1));
	best_val = population[POPSIZE].fitness;


	}*/

	void op()                              //遗传算法优化函数
	{
		generation = 0;
		//initialize();
		evaluate();
		keep_the_best();
		while (generation<MAXGENS)
		{
			generation++;
			select();
			crossover();
			mutate();
			//	report();
			evaluate();
			elitist();
			//	printf("result of generation %d,%g\n",generation, population[POPSIZE].fitness);
			/*	for (i = 0; i < NVARS; i++)
			{
			printf( "var(%d) = %g\t", i, population[POPSIZE].gene[i]);
			}
			printf( "best-val = %g\n", population[POPSIZE].fitness);
			*/

		}

		//printf( "best fitness = %g\n",  population[POPSIZE].fitness);	
	}
};
struct f_s                                     //这个结构体是最优解合并的f(s),fitness函数计算它的fitness
{
	double s1[NVARS];                          //s1和s2分别由pop1和pop2两个种群得到
	double s2[NVARS];
	double x[NVARS * 2];
	double fs;
	double f;
	void fitness() {
		int i;
		f = 0;
		for (i = 0; i < NVARS; i++) {
			x[i] = s1[i];
			x[i + NVARS] = s2[i];
		}                                         //s1和s2组合成x【i】，调用函数计算fitness
		f = f8(x);
	}
};
struct sort                                     //用冒泡排序计算最大fitness的50个个体
{
	int sequence[POPSIZE];
	double a[POPSIZE];
	double temp;
	int i, j;
	void sorting()                                  //冒泡排序函数，以及用数组sequence[]给出排序后的个体序号
	{
		for (i = 0; i < POPSIZE; i++)sequence[i] = i;
		for (j = 0; j < POPSIZE - 1; j++)
			for (i = 0; i < POPSIZE - 1 - j; i++)
			{
				if (a[i] < a[i + 1])
				{
					temp = a[i];
					a[i] = a[i + 1];
					a[i + 1] = temp;
					temp = sequence[i];
					sequence[i] = sequence[i + 1];
					sequence[i + 1] = temp;
				}
			}
	}
};
int main(int argc, char* argv[])
{
	srand(time(NULL));
	int i, j;
	int generation = 0;
	int rank, size;
	pop pop1;
	pop pop2;
	f_s f_s;
	sort sort;
	//double fitness1,fitness2,fs3;
	pop1.initialize();
	pop2 = pop1;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	while (generation < 50)
	{
	//在进程0和进程1同时运行遗传算法优化一次种群1和种群2，结束后将最优值传送给进程2
		if (rank == 0) {
			pop1.op();
			printf("%g", pop1.population[POPSIZE].fitness);
		//	fitness1 = pop1.population[POPSIZE].fitness;
			MPI_Send(&pop1.population[POPSIZE].fitness, 1, MPI_DOUBLE, 2, 0, MPI_COMM_WORLD);
		}
		if (rank == 1) {
			pop2.op();
		//	fitness2 = pop2.population[POPSIZE].fitness;
			MPI_Send(&pop2.population[POPSIZE].fitness, 1, MPI_DOUBLE, 2, 1, MPI_COMM_WORLD);
		}
		
		//进程接收了来自种群1和2的最优值就代表一次遗传算法优化的结束，就开始组成一个新的Fs，并且和种群1和种群2比较产生最后的Fs
		if (rank == 2) {
			MPI_Recv(&pop1.population[POPSIZE].fitness, 1, MPI_DOUBLE, 0, 0,MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			MPI_Recv(&pop2.population[POPSIZE].fitness, 1, MPI_DOUBLE, 1, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			for (i = 0; i < NVARS; i++) {
				f_s.s1[i] = pop1.population[POPSIZE].gene[i];
				f_s.s2[i] = pop2.population[POPSIZE].gene[i];
			}
			f_s.fitness();
			if (pop1.population[POPSIZE].fitness < pop2.population[POPSIZE].fitness)
			{
				if (pop1.population[POPSIZE].fitness < f_s.f)
				{
					f_s.fs = pop1.population[POPSIZE].fitness;
					for (i = 0; i < NVARS; i++)
					{
						f_s.s1[i] = pop1.population[POPSIZE].gene[i];
						f_s.s2[i] = pop1.population[POPSIZE].gene[i];
					}
				}
			}
			else
			{
				if (pop2.population[POPSIZE].fitness < f_s.f)
				{
					f_s.fs = pop2.population[POPSIZE].fitness;
					for (i = 0; i < NVARS; i++)
					{
						f_s.s1[i] = pop2.population[POPSIZE].gene[i];
						f_s.s2[i] = pop2.population[POPSIZE].gene[i];
					}
				}
			}
			printf("第%d次循环后f(s)的fitness：%g\n", generation, f_s.fs);
			//进程2得到最后的Fs后发送信息给进程0和进程1
			MPI_Send(&f_s.fs, 1, MPI_DOUBLE, 0, 2, MPI_COMM_WORLD);
			MPI_Send(&f_s.fs, 1, MPI_DOUBLE, 1, 3, MPI_COMM_WORLD);
		}
		if (rank == 0) {
			MPI_Recv(&f_s.fs, 1, MPI_DOUBLE, 2, 2, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		if (rank == 1) {
			MPI_Recv(&f_s.fs, 1, MPI_DOUBLE, 2, 3, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
		}
		//进程0和进程1接受来自进程2的信息后开始分别替换掉固定的那部分维度变量的值，以及前50个最大fitness值的个体
		if (rank == 0) {
			for (i = 0; i < POPSIZE; i++)                               //固定gene部分的替代
				for (j = 0; j < NVARS; j++)
					pop1.population[i].genefixed[j] = f_s.s2[j];
			for (i = 0; i < POPSIZE; i++)pop1.population[i].fitness = sort.a[i];   //找出pop中最大的50个（暂定为50）个体然后用f_s的s取代
			sort.sorting();
			for (i = 0; i < POPSIZE; i++)
				if (i = sort.sequence[i])
				{
					for (j = 0; j < NVARS; j++)
						pop1.population[i].gene[j] = f_s.s1[j];
				}
		}
		if (rank == 1) {
			for (i = 0; i < POPSIZE; i++)
				for (j = 0; j < NVARS; j++)
					pop2.population[i].genefixed[j] = f_s.s1[j];
			sort.sorting();
			for (i = 0; i < POPSIZE; i++)
				if (i = sort.sequence[i])
				{
					for (j = 0; j < NVARS; j++)
						pop2.population[i].gene[j] = f_s.s2[j];
				}
		}
		generation++;    
	}
	MPI_Finalize();
	/*for (i = 0; i < NVARS; i++) {
		f_s.s1[i] = pop1.population[POPSIZE].gene[i];
		f_s.s2[i] = pop2.population[POPSIZE].gene[i];
	}
	f_s.fitness();
	*/
	printf("最终的finess：%g", f_s.fs);
	//getchar();
	return 0;
}